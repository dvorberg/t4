#!/usr/bin/env python
# -*- coding: utf-8; -*-

import sys, os, os.path as op, argparse
from PIL import Image

def main():
    ap = argparse.ArgumentParser(description="Cut bitmap images in half "
                                 "vertically and create a set of left and "
                                 "right images for each input image.")
    ap.add_argument("-o", dest="outdir", help="Output directory",
                    default=".")
    ap.add_argument("-p", dest="prefix", help="Output file prefix",
                    default="cut")
    ap.add_argument("-r", dest="rotate90", action="store_true", default=False,
                    help="Rotate pages 90° clockwise before splitting.")
    ap.add_argument("-R", dest="rotate270", action="store_true", default=False,
                    help="Rotate pages 90° counter-clockwise "
                    "before splitting.")
    ap.add_argument("-f", dest="rotate180", action="store_true", default=False,
                    help="Rotate pages 180° before splitting.")

    ap.add_argument(metavar="input file", dest="input_files", nargs="+")

    args = ap.parse_args()
    
    def cut_in_half(fn):
        name, ext = op.splitext(fn)
        
        prefix = args.prefix
        if prefix != "" and not prefix.endswith("_"):
            prefix = prefix + "_"
        else:
            prefix = prefix

        def outpath(side):
            fn = "%s%s_%s%s" % (prefix, name, side, ext,)
            return op.join(args.outdir, fn)

        img = Image.open(fn)

        if args.rotate90:
            img = img.transpose(Image.ROTATE_90)
        if args.rotate180:
            img = img.transpose(Image.ROTATE_180)
        if args.rotate270:
            img = img.transpose(Image.ROTATE_270)

        w, h = img.size
        
        leftimg = img.crop( (0, 0, w/2, h,) )
        leftimg.save(outpath("left"), img.format)

        rightimg = img.crop( (w/2, 0, w, h,) )
        rightimg.save(outpath("right"), img.format)

    map(cut_in_half, args.input_files)


main()    
